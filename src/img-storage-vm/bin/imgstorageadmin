#!/opt/rocks/bin/python
#
# @Copyright@
#
#                                 Rocks(r)
#                          www.rocksclusters.org
#                          version 6.2 (SideWinder)
#                          version 7.0 (Manzanita)
#
# Copyright (c) 2000 - 2017 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
# notice unmodified and in its entirety, this list of conditions and the
# following disclaimer in the documentation and/or other materials provided 
# with the distribution.
# 
# 3. All advertising and press materials, printed or electronic, mentioning
# features or use of this software must display the following acknowledgement:
#
#         "This product includes software developed by the Rocks(r)
#         Cluster Group at the San Diego Supercomputer Center at the
#         University of California, San Diego and its contributors."
#
# 4. Except as permitted for the purposes of acknowledgment in paragraph 3,
# neither the name or logo of this software nor the names of its
# authors may be used to endorse or promote products derived from this
# software without specific prior written permission.  The name of the
# software includes the following terms, and any derivatives thereof:
# "Rocks", "Rocks Clusters", and "Avalanche Installer".  For licensing of 
# the associated name, interested parties should contact Technology 
# Transfer & Intellectual Property Services, University of California, 
# San Diego, 9500 Gilman Drive, Mail Code 0910, La Jolla, CA 92093-0910, 
# Ph: (858) 534-5815, FAX: (858) 534-7345, E-MAIL:invent@ucsd.edu
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# @Copyright@
#

from imgstorage import runCommand, ActionError, ZvolBusyActionError
import logging

from pysqlite2 import dbapi2 as sqlite3
import sys
import signal
import rocks.db.helper
import uuid

import logging
logging.basicConfig()

import getopt

def main(argv):
    logger = logging.getLogger(__name__)
    SQLITE_DB = '/opt/rocks/var/img_storage.db'

    if(confirm('Unmap iSCSI target?', True)):
        rhost = raw_input("From which NAS? (Don't forget .ibnet if used) ")
        if rhost:
            try:
                iscsi_targets = runCommand(['iscsiadm', '-m', 'discovery', '-t', 'sendtargets', '-p', rhost])
                linenum = 0
                for line in iscsi_targets:
                    print linenum, line
                    linenum+=1
                ans_arr = raw_input("Which target would you like to delete? (number)").split()
                if(ans_arr):
                    for ans in ans_arr:
                        iscsi_target = iscsi_targets[int(ans)].split(' ')[1]
                        logger.debug('Removing target %s'%iscsi_target)
                        runCommand(['iscsiadm', '-m', 'node', '-T', iscsi_target, '-p', rhost, '-u'])

                        with sqlite3.connect(SQLITE_DB) as con:
                            cur = con.cursor()
                            logger.debug('Removing target from DB %s'%iscsi_target)
                            cur.execute('DELETE FROM sync_queue WHERE iscsi_target = ?',[iscsi_target])
                            cur.execute('DELETE FROM zvols WHERE iscsi_target = ?',[iscsi_target])
                            con.commit()

            except ActionError, e: logger.exception(e)
        print '===================================='

    if(confirm('Destroy lvm?', True)):
        try:
            lvms = runCommand(['dmsetup', 'status'])
            linenum = 0
            for line in lvms:
                print linenum, line
                linenum += 1
            ans_arr = raw_input("Which lvm would you like to destroy? (number)").split()
            if(ans_arr):
                for ans in ans_arr:
                    lvm = lvms[int(ans)].split(' ')[0][:-1]
                    logger.debug('Removing lvm %s'%lvm)
                    runCommand(['dmsetup', 'remove', lvm])
        except ActionError, e: logger.exception(e)
        print '===================================='


    if(confirm('Remove zvol?', True)):
        try:
            zvols = runCommand(['zfs', 'list', '-Hpr', '-o', 'name'])
            linenum = 0
            for line in zvols:
                print linenum, line
                linenum += 1
            ans_arr = raw_input("Which zvol would you like to delete? (number)").split()
            if(ans_arr):
                for ans in ans_arr:
                    zvol = zvols[int(ans)]
                    logger.debug('Removing zvol %s'%zvol)
                    runCommand(['zfs', 'destroy', '-r', zvol])

                    with sqlite3.connect(SQLITE_DB) as con:
                        cur = con.cursor()
                        logger.debug('Removing zvol from DB %s'%zvol)
                        cur.execute('DELETE FROM sync_queue WHERE zvol = ?',[zvol])
                        cur.execute('DELETE FROM zvols WHERE zvol = ?',[zvol])
                        con.commit()

        except ActionError, e: logger.exception(e)
        print '===================================='



def confirm(prompt=None, resp=False):
    """prompts for yes or no response from the user. Returns True for yes and
    False for no.

    'resp' should be set to the default value assumed by the caller when
    user simply types ENTER.

    >>> confirm(prompt='Create Directory?', resp=True)
    Create Directory? [y]|n:
    True
    >>> confirm(prompt='Create Directory?', resp=False)
    Create Directory? [n]|y:
    False
    >>> confirm(prompt='Create Directory?', resp=False)
    Create Directory? [n]|y: y
    True

    """

    if prompt is None:
        prompt = 'Confirm'

    if resp:
        prompt = '%s [%s]|%s: ' % (prompt, 'y', 'n')
    else:
        prompt = '%s [%s]|%s: ' % (prompt, 'n', 'y')

    while True:
        ans = raw_input(prompt)
        if not ans:
            return resp
        if ans not in ['y', 'Y', 'n', 'N']:
            print 'please enter y or n.'
            continue
        if ans == 'y' or ans == 'Y':
            return True
        if ans == 'n' or ans == 'N':
            return False


if __name__ == "__main__":
   main(sys.argv[1:])
